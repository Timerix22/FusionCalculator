class Parser {
    List<Token()> TokenStorage;
    IExpression# RootExpression;
    TokenLinkedList() TokensInRPN;

    internal Parser(){
        RootExpression = new NumericExpression(); // NaN
    }

    internal IExpression# Parse!(List<Token()> tokens){
        TokenStorage = tokens;
        if(tokens.Count == 0)
            return RootExpression; // NaN
        SortTokensInRPN();
        BuildExpressionTree();
        return RootExpression;
    }

    internal void PrintGraphVizCode(){
        string() graphviz = TokensInRPN.ToGraphVizCode();
        Console.WriteLine(graphviz);
    }

    // Implementation of https://en.wikipedia.org/wiki/Shunting_yard_algorithm
    void SortTokensInRPN!(){
        Stack<Token>() RPNStack;

        for(int i = 0; i < TokenStorage.Count; i++){
            Token tok = TokenStorage[i];
            int type = tok.GetTokType();

            switch(type){
                case Token.Type_Number:
                    TokensInRPN.AddToEnd(tok);
                    break;
                case Token.Type_OperatorPow:
                case Token.Type_OperatorMul:
                case Token.Type_OperatorDiv:
                case Token.Type_OperatorMod:
                case Token.Type_OperatorAdd:
                case Token.Type_OperatorSub:
                case Token.Type_Literal:
                    while(RPNStack.Count != 0 && RPNStack.Peek().GetTokType() >= type){
                        Token op2 = RPNStack.Pop();
                        TokensInRPN.AddToEnd(op2);
                    }
                    RPNStack.Push(tok);
                    break;
                case Token.Type_BracketOpen:
                    RPNStack.Push(tok);
                    break;
                case Token.Type_BracketClose:
                    while(RPNStack.Count != 0){
                        Token op2 = RPNStack.Pop();
                        if(op2.GetTokType() == Token.Type_BracketOpen)
                            break;
                        TokensInRPN.AddToEnd(op2);
                    }
                    break;
                default:
                    ThrowError($"unexpected token type '{type}'");
                    break;
            }
        }
        
        // add remaining operators
        while(RPNStack.Count != 0){
            Token op2 = RPNStack.Pop();
            TokensInRPN.AddToEnd(op2);
        }
    }
    
    // Implementation of https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D0%BB%D1%8C%D1%81%D0%BA%D0%B0%D1%8F_%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C#%D0%9E%D0%B1%D1%89%D0%B8%D0%B9_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BE%D0%BA
    void BuildExpressionTree!(){
        Stack<IExpression#>() expressionStack;

        TokenLinkedListNode? tokenNode = TokensInRPN.GetFirstNode();
        while(tokenNode != null){
            Token tok = tokenNode.GetValue();
            int type = tok.GetTokType();
            string() str = tok.GetStr();

            switch(type){
                case Token.Type_Number:
                    NumericExpression# num = new NumericExpression();
                    num.Init(StringToDouble(str));
                    expressionStack.Push(num);
                    break;
                case Token.Type_OperatorPow:
                    PushOperatorExpression(expressionStack, str, new OperatorExpressionPow());
                    break;
                case Token.Type_OperatorMul:
                    PushOperatorExpression(expressionStack, str, new OperatorExpressionMul());
                    break;
                case Token.Type_OperatorDiv:
                    PushOperatorExpression(expressionStack, str, new OperatorExpressionDiv());
                    break;
                case Token.Type_OperatorMod:
                    PushOperatorExpression(expressionStack, str, new OperatorExpressionMod());
                    break;
                case Token.Type_OperatorAdd:
                    PushOperatorExpression(expressionStack, str, new OperatorExpressionAdd());
                    break;
                case Token.Type_OperatorSub:
                    PushOperatorExpression(expressionStack, str, new OperatorExpressionSub());
                    break;
                case Token.Type_BracketClose:
                    ThrowError("unexpected '('");
                    break;
                case Token.Type_BracketOpen:
                    ThrowError("unexpected ')'");
                    break;
                case Token.Type_Literal:
                    switch(str){
                        case "sin":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionSin());
                            break;
                        case "cos":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionCos());
                            break;
                        case "tan":
                        case "tg":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionTg());
                            break;
                        case "ctg":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionCtg());
                            break;
                        case "asin":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionAsin());
                            break;
                        case "acos":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionAcos());
                            break;
                        case "atan":
                        case "atg":
                        case "arctg":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionAtg());
                            break;
                        case "actg":
                        case "arcctg":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionActg());
                            break;
                        case "ln":
                            PushFunctionExpression(expressionStack, str, new FunctionCallExpressionLn());
                            break;
                        default: {
                            ThrowError($"invalid literal '{str}'");
                        }
                        break;
                    }
                    break;
                default: {
                    ThrowError($"unexpected token type '{type}'");
                }
                break;
            }

            tokenNode = tokenNode.GetNext();
        }

        if(expressionStack.Count != 1)
            ThrowError("");
        RootExpression = expressionStack.Pop();
    }

    // returns the number or NaN
    static double StringToDouble(string s){
        double d = Math.NaN;
        #if C
            native{
                d = strtod(s, NULL);
            }
        #elif CS
            native {
                d = Convert.ToDouble(s, System.Globalization.CultureInfo.InvariantCulture);
            }
        #else
            native {
                #error "UNKNOWN PROGRAMMING LANGUAGE (define C or CS)";
            }
        #endif
        return d;
    }

    void PushOperatorExpression(Stack<IExpression#>! expressionStack, string tokStr, OperatorExpression# opExpr) {
        if(expressionStack.Count < 2){
            ThrowError($"unexpected operator '{tokStr}'");
            return;
        }
        IExpression b = expressionStack.Pop();
        IExpression a = expressionStack.Pop();
        opExpr.Init(a, b);
        expressionStack.Push(opExpr);
    }
    void PushFunctionExpression(Stack<IExpression#>! expressionStack, string tokStr, FunctionCallExpression# fExpr) {
        if(expressionStack.Count < 1){
            ThrowError($"unexpected function call '{tokStr}'");
            return;
        }
        IExpression x = expressionStack.Pop();
        fExpr.Init(x);
        expressionStack.Push(fExpr);
    }

    static void ThrowError(string errmsg){
        #if C
            Console.WriteLine("ERROR: "+errmsg);
        #endif
        assert false, errmsg;
    }
}
