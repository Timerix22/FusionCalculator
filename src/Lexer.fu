class Lexer {
    string ExprStr;
    List<Token()>() TokenStorage;
    int tokType = Token.Type_Number;
    int tokBegin = 0;
    int i = 0;

    Token() TokBracketOpen;
    Token() TokBracketClose;
    Token() TokPow;
    Token() TokMul;
    Token() TokMod;
    Token() TokDiv;
    Token() TokAdd;
    Token() TokSub;

    public Lexer(){
        TokBracketOpen = Token.Create("(", 0, 1, Token.Type_BracketOpen);
        TokBracketClose = Token.Create(")", 0, 1, Token.Type_BracketClose);
        TokPow = Token.Create("^", 0, 1, Token.Type_OperatorPow);
        TokMul = Token.Create("*", 0, 1, Token.Type_OperatorMul);
        TokMod = Token.Create("%", 0, 1, Token.Type_OperatorMod);
        TokDiv = Token.Create("/", 0, 1, Token.Type_OperatorDiv);
        TokAdd = Token.Create("+", 0, 1, Token.Type_OperatorAdd);
        TokSub = Token.Create("-", 0, 1, Token.Type_OperatorSub);
    }

    internal void PrintTokens(){
        for(int i = 0; i < TokenStorage.Count; i++){
            Token() tok = TokenStorage[i];
            int tokType = tok.GetTokType();
            string() tokStr = tok.GetStr();
            Console.WriteLine($"'{tokStr}' {tokType:D1}");
        }
    }

    internal List<Token()> Lex!(string exprStr){
        ExprStr = exprStr;

        for(i=0; i < ExprStr.Length; i++) {
            switch (ExprStr[i]) {
                // end token, add new predifined token and move next
                case '(': AddStaticToken(TokBracketOpen); break;
                case ')': AddStaticToken(TokBracketClose); break;
                case '^': AddStaticToken(TokPow); break;
                case '*': AddStaticToken(TokMul); break;
                case '%': AddStaticToken(TokMod); break;
                case '/': AddStaticToken(TokDiv); break;
                case '+': AddStaticToken(TokAdd); break;
                case '-': 
                    if(i != 0 && ExprStr[i-1] != '(')
                        AddStaticToken(TokSub);
                    // else '-' is a part of numeric expression
                    break;
                // try end token and skip current char
                case ' ': case '\t': case '\n': case '\r':
                    TryEndToken();
                    tokBegin++;
                    break;
                // move next
                case '0': case '1': case '2': case '3': case '4':
                case '5': case '6': case '7': case '8': case '9':
                case '.':
                    break;
                // set type from Numeric to Literal
                default:
                    tokType = Token.Type_Literal;
                    break;
            }
        }

        // end last token
        TryEndToken();
        return TokenStorage;
    }

    void TryEndToken!() {
        if (tokBegin != i) {
            Token() tok = Token.Create(ExprStr, tokBegin, i - tokBegin, tokType);
            TokenStorage.Add();
            TokenStorage[TokenStorage.Count-1] = tok;
            tokType = Token.Type_Number;
            tokBegin = i;
        }
    }

    void AddStaticToken!(Token() tok) {
        TryEndToken();
        TokenStorage.Add();
        TokenStorage[TokenStorage.Count-1] = tok;
        tokType = Token.Type_Number;
        tokBegin = i+1;
    }
}
